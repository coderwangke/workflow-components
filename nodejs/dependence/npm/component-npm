#!/usr/bin/env node

let path = require("path");

// builder
function Builder(envs) {
  if (envs["GIT_CLONE_URL"]) {
    this.gitCloneURL = envs["GIT_CLONE_URL"].replace(/\/$/, "");
    this.gitRef = envs["GIT_REF"] ||  "master";
  } else if (envs["_WORKFLOW_GIT_CLONE_URL"]) {
    this.gitCloneURL = envs["_WORKFLOW_GIT_CLONE_URL"].replace(/\/$/, "");
    this.gitRef = envs["_WORKFLOW_GIT_REF"] ||  "master";
  }

  if (!this.gitCloneURL) {
    console.error("envionment variables GIT_CLONE_URL is required");
    process.exit(1);
  }

  this.npmParams = envs["NPM_PARAMS"] || '';

  let paths = this.gitCloneURL.replace(/\.git$/, "").split('/');
  this.projectName = paths[paths.length - 1];

  this.hubRepo = (envs["HUB_REPO"] || "").replace(/\/$/, "");
  if (!this.hubRepo) {
      return; // no need upload
  }
  this.outDir = "node_modules";

  this.hubUser = envs["HUB_USER"];
  this.hubToken = envs["HUB_TOKEN"];

  if (!this.hubUser || !this.hubToken) {
      this.hubUser = envs["_WORKFLOW_HUB_USER"];
      this.hubToken = envs["_WORKFLOW_HUB_TOKEN"];
  }

  if (!this.hubUser || !this.hubToken) {
      console.error("envionment variable HUB_USER, HUB_TOKEN are required\n");
      process.exit(1);
  }

  this.artifactPath = (envs["ARTIFACT_PATH"] || "").replace(/\/$/, "");
  if (this.artifactPath) {
      this.artifactPath = this.artifactPath + '/';
  }

  this.artifactTag = envs["ARTIFACT_TAG"];
  if (!this.artifactTag) {
      this.artifactTag = "latest";
  }
}

Builder.prototype.gitPull = async function() {
  let cmd = new CMD(`git clone --recurse-submodules ${this.gitCloneURL} ${this.projectName}`);
  await cmd.run();
};

Builder.prototype.gitReset = async function() {
  let cwd = path.join(process.cwd(), this.projectName);
  let cmd = new CMD(`git checkout ${this.gitRef} --`, cwd);
  await cmd.run();
};

Builder.prototype.npm = async function() {
  let cwd = path.join(process.cwd(), this.projectName);
  let cmd = new CMD(`npm install ${this.npmParams}`, cwd);
  await cmd.run();
};

Builder.prototype.handleArtifacts = async function() {
   if (!this.hubRepo) {
        console.log("HUB_REPO is empty, no need upload artifacts");
        return
    }

    let cwd = path.join(process.cwd(), this.projectName);
    let artifactsTar = this.outDir + '.tar';
    let cmd = new CMD(`tar  -cjf ${artifactsTar} ${this.outDir}`, cwd);

    await cmd.run();

    let command = `/.workflow/bin/thub push \
        --username=${this.hubUser} --password=${this.hubToken} \
        --repo=${this.hubRepo} \
        --localpath=${artifactsTar} \
        --path=${path.join(this.artifactPath, artifactsTar)} \
        --tag=${this.artifactTag}`;

    cmd = new CMD(command, cwd);
    await cmd.run();

    console.log(`[JOB_OUT] ARTIFACT_URL = ${path.join(this.hubRepo, this.artifactPath, artifactsTar)}\n`);
    console.log("Run upload artifacts succeed.")
};

Builder.prototype.run = async function() {
  try {
    await this.gitPull();
    await this.gitReset();
    await this.npm();
    await this.handleArtifacts();
  } catch (e) {
    console.error("BUILD FAILED: ", e.message);
    process.exit(1);
  }
};

function CMD(command, cwd) {
  this.command = command;
  this.cwd = cwd;
}

CMD.prototype.run = function() {
  let cmd = this;
  let promise = new Promise(function(resolve, reject) {
    console.log(`Run CMD ${cmd.cwd ? 'in ' + cmd.cwd : ''}: ${cmd.command}`);

    let exec = require('child_process').exec;
    let e = exec(cmd.command, {cwd: cmd.cwd});
    let stdout, stderr;

    e.stdout.on('data', data =>{
      stdout = stdout + data;
      process.stdout.write(data);
    });
    e.stderr.on('data', data =>{
      stderr = stderr + data;
      process.stderr.write(data);
    });

    e.on('exit', (code) => {
      if (code == 0 || code == null) {
        resolve(stdout);
      } else {
        reject(new Error(`CMD (${cmd.command}) error with code ${code}`));
      }
    });
  });
  return promise;
};

// main
const envList = [ // inputs
  "GIT_CLONE_URL", "GIT_REF",
  "_WORKFLOW_GIT_CLONE_URL", "_WORKFLOW_GIT_REF",
  "LINT_PATH", "LINT_PARAMS",

  "HUB_REPO", "ARTIFACT_TAG", "ARTIFACT_PATH",

  "HUB_USER", "HUB_TOKEN",
  "_WORKFLOW_HUB_USER", "_WORKFLOW_HUB_TOKEN"
];
let envs = {};
for (let envName of envList) {
  envs[envName] = process.env[envName];
}
(new Builder(envs)).run();
